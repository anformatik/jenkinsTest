pipeline {
    agent any

    options {
        skipDefaultCheckout(true) // prevent default checkout of git branch
        timestamps() // Add timestamps to the Console Output
    }

    environment {
        buildNumber="${env.BUILD_NUMBER}"
        branchName="${env.Branch}"
        DOCKER_HUB_CRED_USR="mhm"
        containerPort=80 // fix the container port
        toRepositoryName="angular-nginx-${env.environment}" // repository to which the image will be pushed
        containerName="angular-nginx-${env.environment}-container"
        serviceName="nginx-${env.environment}"
        server_ip="20.51.236.140"
        docker_daemon_port=2375
        // DOCKER_HOST="tcp://${server_ip}:${docker_daemon_port}"
        LOCAL_REGISTRY="localhost:6600" // Local Docker Registry Address
        environ="${env.environment}" // environment info from pipeline input
    }

    stages {
        stage('Docker Workflow') {
            stages {
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                        cleanWs() // Workspace Clean Plugin to delete the workspace before cloning and building
                        // we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${branchName}", url: 'https://github.com/anformatik/jenkinsTest.git'
                    }
                }

                stage('Load Environment Config') {
                    steps {
                        script {
                            def envConfig = readJSON file: "src/assets/environments/${environ}.config.json"
                            env.appPort = "${envConfig.port}" // decide the application port based on the environment
                        }
                    }
                }

                stage('Docker Build') {
                    steps {
                        echo 'Running Docker Compose build'
                        sh "docker-compose -f docker/docker-compose.yml build ${serviceName}"
                    }
                }

                stage('Docker Login') {
                    steps {
                        echo 'Skipping login as we are using local registry'
                    }
                }

                stage('Docker Push') {
                    steps {
                        echo 'Pushing image to local registry'
                        sh "docker tag ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:${buildNumber} ${LOCAL_REGISTRY}/${toRepositoryName}:${buildNumber}"
                        sh "docker push ${LOCAL_REGISTRY}/${toRepositoryName}:${buildNumber}"
                    }
                }

                stage('Deploy to Remote VM') {
                    steps {
                        // echo 'Execute SSH..'
                        // withCredentials([sshUserPrivateKey(
                        //     credentialsId: 'sshConnection', usernameVariable: 'username', keyFileVariable: 'keyfile')]) {
                            sh "ssh -o StrictHostKeyChecking=no -i ${keyfile} ${username}@${server_ip} \
                            docker-compose -f docker/docker-compose.yml up -d --remove-orphans --no-build ${serviceName} \
                            && docker cp src/assets/environments/${environ}.config.json ${containerName}:/usr/share/nginx/html/assets/environments/runtime-environment.json \
                            && docker image prune --force \
                            && docker ps \
                            && docker images"
                        // }
                    }
                }
            }
        }
    }
}
